{"name":"Blueprint","tagline":"Reverse engineer server configuration","body":"# Blueprint\r\n\r\nBlueprint reverse-engineers servers.\r\n\r\n* Easy configuration management.\r\n* Detect relevant packages, files, and source installs.\r\n* Generate reusable server configs.\r\n* Convert blueprints to Puppet or Chef or CFEngine 3.\r\n* No DSLs, no extra servers, no workflow changes.\r\n\r\nBlueprint looks inside popular package managers, finds changes you made to configuration files, and archives software you built from source.  It runs on Debian- and RPM-based Linux distros with Python >= 2.6 and Git >= 1.7.  See <http://devstructure.github.com/blueprint/> for comprehensive documentation and examples.\r\n\r\n## Usage\r\n\r\n### Create a blueprint\r\n\r\n    blueprint create my-first-blueprint\r\n\r\nBlueprint inspects your server and stores the results in its local repository.  `blueprint list` shows all the blueprints you've created on this server.\r\n\r\n### Apply a blueprint\r\n\r\n    blueprint apply my-first-blueprint\r\n\r\nBlueprint generates shell code from my-first-blueprint and executes it on the server. \r\n\r\n### Generate POSIX shell code from a blueprint\r\n\r\n\tblueprint show -S my-first-blueprint\r\n\r\n`my-first-blueprint.sh` is written to your working directory.  Try out `-P` or `-C` or `--cfengine3` to generate a Puppet module or a Chef cookbook or a CFEngine 3 sketch.\r\n\r\n### Diff a blueprint\r\n\r\n\tblueprint diff foo bar baz\r\n\r\nBlueprint subtracts `bar` from `foo`.  Files, packages and sources that appears in `foo` but not `bar` will be carried over to `baz` and everything else will be dropped.\r\n\r\n### Push a blueprint\r\n\r\n    blueprint push my-first-blueprint\r\n\r\nThe blueprint and its files are stored remotely.  You get a secret URL for accessing it.\r\n\r\n### Pull a blueprint\r\n\r\n    blueprint pull https://devstructure.com/MY-SECRET-KEY/my-first-blueprint\r\n\r\nThe blueprint is stored locally and ready for use.\r\n\r\n## Installation\r\n\r\nPrerequisites:\r\n\r\n* Debian- or RPM-based Linux\r\n* Python >= 2.6\r\n* Git >= 1.7 (not just for installation from source)\r\n\r\nYou may need to add `Defaults !always_set_home` to `/etc/sudoers` to run `blueprint` as `root`, which is required in order to capture source tarballs.\r\n\r\n### From DevStructure’s Debian archive\r\n\r\n\techo \"deb http://packages.devstructure.com $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/devstructure.list\r\n\tsudo wget -O /etc/apt/trusted.gpg.d/devstructure.gpg http://packages.devstructure.com/keyring.gpg\r\n\tsudo apt-get update\r\n\tsudo apt-get -y install blueprint\r\n\r\n### From PyPI\r\n\r\n\tpip install blueprint\r\n\r\nMake sure `pip` is using Python >= 2.6, otherwise the installation will succeed but Blueprint will not run.\r\n\r\n### From source on Debian, Ubuntu, Fedora, CentOS 6, and RHEL 6\r\n\r\n\tgit clone git://github.com/devstructure/blueprint.git\r\n\tcd blueprint\r\n\tgit submodule update --init\r\n\tmake && sudo make install\r\n\r\n### From source on CentOS 5 and RHEL 5\r\n\r\n\trpm -Uvh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm\r\n\tyum install python26\r\n\tgit clone git://github.com/devstructure/blueprint.git\r\n\tcd blueprint\r\n\tgit submodule update --init\r\n\tmake && sudo make install PYTHON=/usr/bin/python26\r\n\r\nThis installs Python 2.6 from EPEL side-by-side with Python 2.4 and so won’t break Yum.\r\n\r\n## Documentation\r\n\r\nThe prose [documentation](http://devstructure.github.com/blueprint/) provides a comprehensive overview of the tool including philosophy, installation, and detailed examples.\r\n\r\nThe HTTP [protocols](https://devstructure.github.com/blueprint/#protocols) and [endpoints](https://devstructure.github.com/blueprint/#endpoints) used by `blueprint-push`(1) and `blueprint-pull`(1) are documented so that others may run compatible servers.\r\n\r\n## Manuals\r\n\r\n* [`blueprint-list`(1)](http://devstructure.github.com/blueprint/blueprint-list.1.html): list all blueprints.\r\n* [`blueprint-create`(1)](http://devstructure.github.com/blueprint/blueprint-create.1.html): create a blueprint.\r\n* [`blueprint-rules`(1)](http://devstructure.github.com/blueprint/blueprint-rules.1.html): create a blueprint from a blueprint-rules file.\r\n* [`blueprint-show`(1)](http://devstructure.github.com/blueprint/blueprint-show.1.html): generate code from a blueprint.\r\n* [`blueprint-diff`(1)](http://devstructure.github.com/blueprint/blueprint-diff.1.html): save the difference between two blueprints.\r\n* [`blueprint-split`(1)](http://devstructure.github.com/blueprint/blueprint-split.1.html): split one blueprint into two others interactively.\r\n* [`blueprint-prune`(1)](http://devstructure.github.com/blueprint/blueprint-prune.1.html): select a subset of resources interactively.\r\n* [`blueprint-template`(1)](http://devstructure.github.com/blueprint/blueprint-template.1.html): render mustache.sh templates locally.\r\n* [`blueprint-apply`(1)](http://devstructure.github.com/blueprint/blueprint-apply.1.html): run a blueprint's generated shell code.\r\n* [`blueprint-push`(1)](http://devstructure.github.com/blueprint/blueprint-push.1.html): push a blueprint to the Internet.\r\n* [`blueprint-pull`(1)](http://devstructure.github.com/blueprint/blueprint-pull.1.html): pull a blueprint from the Internet.\r\n* [`blueprint-destroy`(1)](http://devstructure.github.com/blueprint/blueprint-destroy.1.html): destroy a blueprint.\r\n* [`blueprint`(5)](http://devstructure.github.com/blueprint/blueprint.5.html): Blueprint JSON format.\r\n* [`blueprintignore`(5)](http://devstructure.github.com/blueprint/blueprintignore.5.html): ignore specific files when creating blueprints.\r\n* [`blueprint-rules`(5)](http://devstructure.github.com/blueprint/blueprint-rules.5.html): enumerate resources in blueprints.\r\n* [`blueprint.cfg`(5)](http://devstructure.github.com/blueprint/blueprint.cfg.5.html): centralized blueprint service configuration.\r\n* [`blueprint-template`(5)](http://devstructure.github.com/blueprint/blueprint-template.5.html): `mustache.sh` template language syntax.\r\n* [`blueprint-template`(7)](http://devstructure.github.com/blueprint/blueprint-template.7.html): built-in template data.\r\n* [`blueprint`(7)](http://devstructure.github.com/blueprint/blueprint.7.html): Blueprint Python library.\r\n\r\n### Plumbing\r\n\r\n* [`blueprint-git`(1)](http://devstructure.github.com/blueprint/blueprint-git.1.html): low-level access to blueprints.\r\n* [`blueprint-show-files`(1)](http://devstructure.github.com/blueprint/blueprint-show-files.1.html): show files in a blueprint.\r\n* [`blueprint-show-ignore`(1)](http://devstructure.github.com/blueprint/blueprint-show-ignore.1.html): show `blueprintignore`(5) rules from a blueprint.\r\n* [`blueprint-show-packages`(1)](http://devstructure.github.com/blueprint/blueprint-show-packages.1.html): show packages in a blueprint.\r\n* [`blueprint-show-services`(1)](http://devstructure.github.com/blueprint/blueprint-show-services.1.html): show services in a blueprint.\r\n* [`blueprint-show-sources`(1)](http://devstructure.github.com/blueprint/blueprint-show-sources.1.html): show source tarballs in a blueprint.\r\n\r\n## Contribute\r\n\r\nBlueprint is [BSD-licensed](https://github.com/devstructure/blueprint/blob/master/LICENSE).\r\n\r\n* Source code: <https://github.com/devstructure/blueprint>\r\n* Issue tracker: <https://github.com/devstructure/blueprint/issues>\r\n* Documentation: <http://devstructure.github.com/blueprint/>\r\n* Wiki: <https://github.com/devstructure/blueprint/wiki>\r\n* Mailing list: <https://groups.google.com/forum/#!forum/blueprint-users>\r\n* IRC: `#devstructure` on Freenode\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}